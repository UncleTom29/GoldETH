/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PriceOracleConstants,
  PriceOracleConstantsInterface,
} from "../../../contracts/oracleprice/PriceOracleConstants";

const _abi = [
  {
    inputs: [],
    name: "DECIMALS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ONE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x609f610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c80632e0f2625146042578063c2ee3a0814605b575b600080fd5b6049601281565b60405190815260200160405180910390f35b6049670de0b6b3a76400008156fea26469706673582212206ac8f71e1336d370faa7ddbac5fb6ea00ae284d0af9365061ffc05f1b723795b64736f6c634300080a0033";

type PriceOracleConstantsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PriceOracleConstantsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PriceOracleConstants__factory extends ContractFactory {
  constructor(...args: PriceOracleConstantsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PriceOracleConstants> {
    return super.deploy(overrides || {}) as Promise<PriceOracleConstants>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PriceOracleConstants {
    return super.attach(address) as PriceOracleConstants;
  }
  override connect(signer: Signer): PriceOracleConstants__factory {
    return super.connect(signer) as PriceOracleConstants__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PriceOracleConstantsInterface {
    return new utils.Interface(_abi) as PriceOracleConstantsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PriceOracleConstants {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as PriceOracleConstants;
  }
}
