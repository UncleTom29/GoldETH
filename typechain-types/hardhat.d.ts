/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Factory__factory>;
    getContractFactory(
      name: "IFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFactory__factory>;
    getContractFactory(
      name: "ERC20Gild",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Gild__factory>;
    getContractFactory(
      name: "ERC20GildFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20GildFactory__factory>;
    getContractFactory(
      name: "Gildable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Gildable__factory>;
    getContractFactory(
      name: "NativeGild",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NativeGild__factory>;
    getContractFactory(
      name: "NativeGildFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NativeGildFactory__factory>;
    getContractFactory(
      name: "ChainlinkFeedPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkFeedPriceOracle__factory>;
    getContractFactory(
      name: "ChainlinkFeedPriceOracleFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkFeedPriceOracleFactory__factory>;
    getContractFactory(
      name: "ChainlinkTwoFeedPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkTwoFeedPriceOracle__factory>;
    getContractFactory(
      name: "ChainlinkTwoFeedPriceOracleFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkTwoFeedPriceOracleFactory__factory>;
    getContractFactory(
      name: "Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Factory__factory>;
    getContractFactory(
      name: "IFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFactory__factory>;
    getContractFactory(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracle__factory>;
    getContractFactory(
      name: "PriceOracleConstants",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceOracleConstants__factory>;

    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "IERC1155MetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Factory>;
    getContractAt(
      name: "IFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFactory>;
    getContractAt(
      name: "ERC20Gild",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Gild>;
    getContractAt(
      name: "ERC20GildFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20GildFactory>;
    getContractAt(
      name: "Gildable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Gildable>;
    getContractAt(
      name: "NativeGild",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NativeGild>;
    getContractAt(
      name: "NativeGildFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NativeGildFactory>;
    getContractAt(
      name: "ChainlinkFeedPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkFeedPriceOracle>;
    getContractAt(
      name: "ChainlinkFeedPriceOracleFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkFeedPriceOracleFactory>;
    getContractAt(
      name: "ChainlinkTwoFeedPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkTwoFeedPriceOracle>;
    getContractAt(
      name: "ChainlinkTwoFeedPriceOracleFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkTwoFeedPriceOracleFactory>;
    getContractAt(
      name: "Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Factory>;
    getContractAt(
      name: "IFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFactory>;
    getContractAt(
      name: "IPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracle>;
    getContractAt(
      name: "PriceOracleConstants",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceOracleConstants>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
